package myPackage;

/**
*
* @author Team
*/
import javax.swing.*;

import java.awt.*;
import java.sql.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class SearchPage extends javax.swing.JFrame {
	
	public static String arr_query1[];
	public static String going_trains[];
	public static String coming_trains[];
	public static int nop;
	public static String source1;
	public static String destination1;
	public static String ron;
	public static String sw;
	public static String dw;
	public static String ron1;
	public static String ron2;
	
	
   public SearchPage() {
       initComponents();
       buttonGroup1.add(jRadioButton1);
       buttonGroup1.add(jRadioButton2);
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {
	   
	   buttonGroup1 = new javax.swing.ButtonGroup();
       jPanel1 = new javax.swing.JPanel();
       jPanel2 = new javax.swing.JPanel();
       jLabel1 = new javax.swing.JLabel();
       jComboBox1 = new javax.swing.JComboBox();
       jComboBox2 = new javax.swing.JComboBox();
       jLabel2 = new javax.swing.JLabel();
       jLabel3 = new javax.swing.JLabel();
       jLabel4 = new javax.swing.JLabel();
       jRadioButton1 = new javax.swing.JRadioButton();
       jRadioButton2 = new javax.swing.JRadioButton();
       jLabel5 = new javax.swing.JLabel();
       jLabel6 = new javax.swing.JLabel();
       jTextField1 = new javax.swing.JTextField();
       jTextField2 = new javax.swing.JTextField();
       jLabel7 = new javax.swing.JLabel();
       jTextField3 = new javax.swing.JTextField();
       jButton1 = new javax.swing.JButton();

       setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
       setPreferredSize(new java.awt.Dimension(500, 450));

       jPanel1.setBackground(new java.awt.Color(153, 153, 153));
       jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
       jPanel1.setPreferredSize(new java.awt.Dimension(500, 450));

       jPanel2.setBackground(new java.awt.Color(0, 0, 0));
       jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
       jPanel2.setForeground(new java.awt.Color(255, 255, 255));
       jPanel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

       jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
       jLabel1.setForeground(new java.awt.Color(255, 255, 255));
       jLabel1.setText("Search Trains");

       javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
       jPanel2.setLayout(jPanel2Layout);
       jPanel2Layout.setHorizontalGroup(
           jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           .addGroup(jPanel2Layout.createSequentialGroup()
               .addContainerGap()
               .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addContainerGap(336, Short.MAX_VALUE))
       );
       jPanel2Layout.setVerticalGroup(
           jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           .addGroup(jPanel2Layout.createSequentialGroup()
               .addContainerGap()
               .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
               .addContainerGap())
       );

       jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Origin", "San Jose", "Santa Clara", "Sunnyvale", "Palo Alto", "San Mateo", "Broadway", "San Francisco" }));

       jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Destination","San Jose", "Santa Clara", "Sunnyvale", "Palo Alto", "San Mateo", "Broadway", "San Francisco" }));

       jLabel2.setText("Traveling From");

       jLabel3.setText("Traveling To");

       jLabel4.setText("Trip Type");

       jRadioButton1.setText("One-Way");

       jRadioButton2.setText("Round Trip");

       jLabel5.setText("Departing On");

       jLabel6.setText("Returning On");

       jTextField1.setText("Select a Date");

       jTextField2.setText("Select a Date");

       jLabel7.setText("No of Passengers");

       jButton1.setText("Search");
       jButton1.addActionListener(new java.awt.event.ActionListener() {
           public void actionPerformed(java.awt.event.ActionEvent evt) {
               jButton1ActionPerformed(evt);
           }
       });

       javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
       jPanel1.setLayout(jPanel1Layout);
       jPanel1Layout.setHorizontalGroup(
           jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           .addGroup(jPanel1Layout.createSequentialGroup()
               .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                   .addGroup(jPanel1Layout.createSequentialGroup()
                       .addContainerGap()
                       .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                   .addGroup(jPanel1Layout.createSequentialGroup()
                       .addGap(89, 89, 89)
                       .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                           .addComponent(jLabel2)
                           .addComponent(jLabel7)
                           .addComponent(jLabel3)
                           .addComponent(jLabel4)
                           .addComponent(jLabel5)
                           .addComponent(jLabel6))
                       .addGap(40, 40, 40)
                       .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                           .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                               .addGroup(jPanel1Layout.createSequentialGroup()
                                   .addComponent(jRadioButton1)
                                   .addGap(18, 18, 18)
                                   .addComponent(jRadioButton2))
                               .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                               .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                               .addComponent(jTextField1)
                               .addComponent(jTextField2))
                           .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                           .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                       .addGap(0, 0, Short.MAX_VALUE)))
               .addContainerGap())
       );
       jPanel1Layout.setVerticalGroup(
           jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           .addGroup(jPanel1Layout.createSequentialGroup()
               .addContainerGap()
               .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addGap(30, 30, 30)
               .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                   .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                   .addComponent(jLabel2))
               .addGap(29, 29, 29)
               .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                   .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                   .addComponent(jLabel3))
               .addGap(18, 18, 18)
               .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                   .addComponent(jLabel4)
                   .addComponent(jRadioButton1)
                   .addComponent(jRadioButton2))
               .addGap(18, 18, 18)
               .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                   .addComponent(jLabel5)
                   .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGap(18, 18, 18)
               .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                   .addComponent(jLabel6)
                   .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGap(18, 18, 18)
               .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                   .addComponent(jLabel7)
                   .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGap(18, 18, 18)
               .addComponent(jButton1)
               .addContainerGap(30, Short.MAX_VALUE))
       );

       javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
       getContentPane().setLayout(layout);
       layout.setHorizontalGroup(
           layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 641, Short.MAX_VALUE)
       );
       layout.setVerticalGroup(
           layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
           .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
       );

       pack();
   }// </editor-fold>//GEN-END:initComponents

   //Method to check if the inputted date is of valid date format
	 public static boolean checkDate(String inDate) {
		    SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
		    dateFormat.setLenient(false);
		    try {
		      dateFormat.parse(inDate.trim());
		    } catch (ParseException pe) {
		      return false;
		    }
		    return true;
		  }
	 
	 //Method to return the day of the week from an input string as a date
	 public static String returnDay(String ip_str)
	 {
		 SimpleDateFormat format1=new SimpleDateFormat("dd/MM/yyyy");
		  try
		  {
		  Date dt1=format1.parse(ip_str);
		  DateFormat format2=new SimpleDateFormat("EEEE"); 
		  String finalDay=format2.format(dt1);
		  return finalDay;
		  }
		  catch(ParseException e)
		  {
			  System.out.println(e);
			  return "Monday";
		  }
	 }

   
   private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       // TODO add your handling code here:
       
	   if(!(jComboBox1.getSelectedItem().toString().equals("Select Origin")||jComboBox2.getSelectedItem().toString().equals("Select Destination")||jTextField3.getText().equals("")))
	   {
		   if(!(jRadioButton1.isSelected())&&!(jRadioButton2.isSelected()))
		   {
			   JOptionPane.showMessageDialog(this,"Please select trip type to continue.","EMPTY FIELDS",JOptionPane.ERROR_MESSAGE);
		   }
	       else if(jRadioButton1.isSelected()&&(jTextField1.getText().equals("")))
	       {
			   JOptionPane.showMessageDialog(this,"Please fill up all the details.","EMPTY FIELDS",JOptionPane.ERROR_MESSAGE);
	       }
	       else if(jRadioButton2.isSelected()&&((jTextField1.getText().equals("")||(jTextField2.getText().equals("")))))
	       {
	    	   JOptionPane.showMessageDialog(this,"Please fill up all the details.","EMPTY FIELDS",JOptionPane.ERROR_MESSAGE);
	       }
	       else
	       {
	    	   if(jComboBox1.getSelectedItem().toString().equals(jComboBox2.getSelectedItem().toString()))
	    	   {
	    		   JOptionPane.showMessageDialog(this,"Source and destination cannot be the same.Re-enter.","",JOptionPane.ERROR_MESSAGE);
	    	   }
	    	   else
	    	   {
	    		   if(jRadioButton1.isSelected())
	    		   {
	    			   String s=jTextField1.getText();
	    		       if(checkDate(s))
	    		       {   
	    		    	   
	    		    	   int priority1;
    		    		   int priority2;
    		    		   
    		    		   //Giving priorities to the first Combobox items
    		    		   if(jComboBox1.getSelectedItem().toString().equals("San Jose"))
    		    		   {
    		    			   priority1 = 1;
    		    		   }
    		    		   else if(jComboBox1.getSelectedItem().toString().equals("Santa Clara"))
    		    		   {
    		    			   priority1 = 2;
    		    		   }
    		    		   else if(jComboBox1.getSelectedItem().toString().equals("Sunnyvale"))
    		    		   {
    		    			   priority1 = 3;
    		    		   }
    		    		   else if(jComboBox1.getSelectedItem().toString().equals("Palo Alto"))
    		    		   {
    		    			   priority1 = 4;
    		    		   }
    		    		   else if(jComboBox1.getSelectedItem().toString().equals("San Mateo"))
    		    		   {
    		    			   priority1 = 5;
    		    		   }
    		    		   else if(jComboBox1.getSelectedItem().toString().equals("Broadway"))
    		    		   {
    		    			   priority1 = 6;
    		    		   }
    		    		   else
    		    			   priority1 = 7;
    		    		   
    		    		   
    		    		   
    		    		   //Giving priorities to the second ComboBox items
    		    		   if(jComboBox2.getSelectedItem().toString().equals("San Jose"))
    		    		   {
    		    			   priority2 = 1;
    		    		   }
    		    		   else if(jComboBox2.getSelectedItem().toString().equals("Santa Clara"))
    		    		   {
    		    			   priority2 = 2;
    		    		   }
    		    		   else if(jComboBox2.getSelectedItem().toString().equals("Sunnyvale"))
    		    		   {
    		    			   priority2 = 3;
    		    		   }
    		    		   else if(jComboBox2.getSelectedItem().toString().equals("Palo Alto"))
    		    		   {
    		    			   priority2 = 4;
    		    		   }
    		    		   else if(jComboBox2.getSelectedItem().toString().equals("San Mateo"))
    		    		   {
    		    			   priority2 = 5;
    		    		   }
    		    		   else if(jComboBox2.getSelectedItem().toString().equals("Broadway"))
    		    		   {
    		    			   priority2 = 6;
    		    		   }
    		    		   else
    		    			   priority2 = 7;
    		    		   
    		    		   //comparing the priorities
	    		    	   //one way ka query
	    		    	   //converting the input date to check the day (weekday or weekend)
	    		    	   String day_of_week = returnDay(s);
	    		    	   if(day_of_week.equals("Monday")||day_of_week.equals("Tuesday")||day_of_week.equalsIgnoreCase("Wednesday")||day_of_week.equals("Thursday")||day_of_week.equals("Friday"))
	    		    	   {
	    		    		   String running_on = "Weekday";
	    		    		   ron= "Weekday";
	    		    		   //write the query
	    		    		   //selecting the station priority
	    		    		  
	    		    		   if((priority1-priority2)<0)
	    		    		   {
	    		    			   //take San Jose as the source
	    		    			   sw = jComboBox1.getSelectedItem().toString();
	    		    			   dw = jComboBox2.getSelectedItem().toString();
	    		    			   nop = Integer.parseInt(jTextField3.getText());
	    		    			   DatabaseConnectivity dbc = new DatabaseConnectivity();
	    		    			   dbc.databaseConnectivity();
	    		    			   arr_query1 = dbc.querySJSource(jComboBox1.getSelectedItem().toString(),jComboBox2.getSelectedItem().toString(),running_on,Integer.parseInt(jTextField3.getText()));
	    		    			   
	    		    			   
	    		    			   //Displaying the returned array of strings for testing purposes
	    		    			   //for(int i=0;i<arr_query1.length;i++)
	    		    			   //{
	    		    				 //  System.out.println(arr_query1[i]);
	    		    			   //}
	    		    			   
	    		    			   //go to the next page
	    		    			   this.dispose();
	    		    			   new OneWayWeekDay().setVisible(true);
	    		    		   }
	    		    		   else
	    		    		   {
	    		    			   //take San Francisco as the source
	    		    			   sw = jComboBox1.getSelectedItem().toString();
	    		    			   dw = jComboBox2.getSelectedItem().toString();
	    		    			   nop = Integer.parseInt(jTextField3.getText());
	    		    			   DatabaseConnectivity dbc = new DatabaseConnectivity();
	    		    			   dbc.databaseConnectivity();
	    		    			   arr_query1 = dbc.querySFSource(jComboBox1.getSelectedItem().toString(),jComboBox2.getSelectedItem().toString(),running_on,Integer.parseInt(jTextField3.getText()));
	    		    			   //for(int i=0;i<arr_query1.length;i++)
	    		    			   //{
	    		    				 //  System.out.println(arr_query1[i]);
	    		    			   //}
	    		    			   
	    		    			   //go to the next page
	    		    			   this.dispose();
	    		    			   new OneWayWeekDay().setVisible(true);
	    		    		   }
	    		    		   

	    		    	   }
	    		    	   else
	    		    	   {
	    		    		   String running_on = "Weekend";
	    		    		   ron = "Weekend";
	    		    		   //selecting the station priority
	    		    		   if((priority1-priority2)<0)
	    		    		   {
	    		    			   //take San Jose as the source
	    		    			   sw = jComboBox1.getSelectedItem().toString();
	    		    			   dw = jComboBox2.getSelectedItem().toString();
	    		    			   nop = Integer.parseInt(jTextField3.getText());
	    		    			   DatabaseConnectivity dbc = new DatabaseConnectivity();
	    		    			   dbc.databaseConnectivity();
	    		    			   arr_query1 = dbc.querySJSource(jComboBox1.getSelectedItem().toString(),jComboBox2.getSelectedItem().toString(),running_on,Integer.parseInt(jTextField3.getText())); 
	    		    			   
	    		    			   //Displaying the returned array of strings for testing purposes
	    		    			   //for(int i=0;i<arr_query1.length;i++)
	    		    			   //{
	    		    				//   System.out.println(arr_query1[i]);
	    		    			   //}
	    		    			   
	    		    			   //go to the next page
	    		    			   this.dispose();
	    		    			   new OneWayWeekEnd().setVisible(true);
	    		    		   }
	    		    		   else
	    		    		   {
	    		    			   //take San Francisco as the source
	    		    			   sw = jComboBox1.getSelectedItem().toString();
	    		    			   dw = jComboBox2.getSelectedItem().toString();
	    		    			   nop = Integer.parseInt(jTextField3.getText());
	    		    			   DatabaseConnectivity dbc = new DatabaseConnectivity();
	    		    			   dbc.databaseConnectivity();
	    		    			   arr_query1 = dbc.querySFSource(jComboBox1.getSelectedItem().toString(),jComboBox2.getSelectedItem().toString(),running_on,Integer.parseInt(jTextField3.getText()));
	    		    			   //for(int i=0;i<arr_query1.length;i++)
	    		    			   //{
	    		    				 //  System.out.println(arr_query1[i]);
	    		    			   //}
	    		    			   
	    		    			   //go to the next page
	    		    			   this.dispose();
	    		    			   new OneWayWeekEnd().setVisible(true);
	    		    		   }
		    		   
	    		    	   }
	    		    
	    		       }
	    		       else
	    		       {
	    		    	   JOptionPane.showMessageDialog(this,"Please enter date in the format: dd/mm/yyyy","",JOptionPane.ERROR_MESSAGE);  
	    		       }
	    		   }
	    		   
	    		   if(jRadioButton2.isSelected())
	    		   {
	    			   String s1=jTextField1.getText();
	    			   String s2=jTextField2.getText();
	    			   
	    		       if(checkDate(s1)&&checkDate(s2))
	    		       {
	    		    	   int priority1;
    		    		   int priority2;
	    		    	 //Giving priorities to the first Combobox items
    		    		   if(jComboBox1.getSelectedItem().toString().equals("San Jose"))
    		    		   {
    		    			   priority1 = 1;
    		    		   }
    		    		   else if(jComboBox1.getSelectedItem().toString().equals("Santa Clara"))
    		    		   {
    		    			   priority1 = 2;
    		    		   }
    		    		   else if(jComboBox1.getSelectedItem().toString().equals("Sunnyvale"))
    		    		   {
    		    			   priority1 = 3;
    		    		   }
    		    		   else if(jComboBox1.getSelectedItem().toString().equals("Palo Alto"))
    		    		   {
    		    			   priority1 = 4;
    		    		   }
    		    		   else if(jComboBox1.getSelectedItem().toString().equals("San Mateo"))
    		    		   {
    		    			   priority1 = 5;
    		    		   }
    		    		   else if(jComboBox1.getSelectedItem().toString().equals("Broadway"))
    		    		   {
    		    			   priority1 = 6;
    		    		   }
    		    		   else
    		    			   priority1 = 7;
    		    		   
    		    		   
    		    		   
    		    		   //Giving priorities to the second ComboBox items
    		    		   if(jComboBox2.getSelectedItem().toString().equals("San Jose"))
    		    		   {
    		    			   priority2 = 1;
    		    		   }
    		    		   else if(jComboBox2.getSelectedItem().toString().equals("Santa Clara"))
    		    		   {
    		    			   priority2 = 2;
    		    		   }
    		    		   else if(jComboBox2.getSelectedItem().toString().equals("Sunnyvale"))
    		    		   {
    		    			   priority2 = 3;
    		    		   }
    		    		   else if(jComboBox2.getSelectedItem().toString().equals("Palo Alto"))
    		    		   {
    		    			   priority2 = 4;
    		    		   }
    		    		   else if(jComboBox2.getSelectedItem().toString().equals("San Mateo"))
    		    		   {
    		    			   priority2 = 5;
    		    		   }
    		    		   else if(jComboBox2.getSelectedItem().toString().equals("Broadway"))
    		    		   {
    		    			   priority2 = 6;
    		    		   }
    		    		   else
    		    			   priority2 = 7;
    		    		   
	    		    	   
	    		    	   //converting the input date to check the day (weekday or weekend)
	    		    	   String going_day = returnDay(s1);
	    		    	   String coming_day = returnDay(s2);
	    		    	   
	    		    	   //if both the days are weekdays
	    		    	   if((going_day.equals("Monday")||going_day.equals("Tuesday")||going_day.equals("Wednesday")||going_day.equals("Thursday")||going_day.equals("Friday"))&&(coming_day.equals("Monday")||coming_day.equals("Tuesday")||coming_day.equals("Wednesday")||coming_day.equals("Thursday")||coming_day.equals("Friday")))
	    		    	   {
	    		    		   String running_on_going = "Weekday";
	    		    		   String running_on_coming = "Weekday";
	    		    		   ron1 = "Weekday";
	    		    		   ron2 = "Weekday";
	    		    		   
	    		    		   //Decide the source by the station priorities
	    		    		   if((priority1-priority2)<0)
	    		    		   {
	    		    			   //Take San Jose as the source for going and opposite for returning
	    		    			   sw = jComboBox1.getSelectedItem().toString();
	    		    			   dw = jComboBox2.getSelectedItem().toString();
	    		    			   source1 = jComboBox1.getSelectedItem().toString();
	    		    			   destination1 = jComboBox2.getSelectedItem().toString();
	    		    			   nop = Integer.parseInt(jTextField3.getText());
	    		    			   DatabaseConnectivity dbc = new DatabaseConnectivity();
	    		    			   dbc.databaseConnectivity();
	    		    			   going_trains = dbc.querySJSource(jComboBox1.getSelectedItem().toString(),jComboBox2.getSelectedItem().toString(),running_on_going,Integer.parseInt(jTextField3.getText()));
	    		    			   coming_trains = dbc.querySFSource(jComboBox2.getSelectedItem().toString(),jComboBox1.getSelectedItem().toString(),running_on_coming,Integer.parseInt(jTextField3.getText()));
	    		    			   //System.out.println("Going trains");
	    		    			   //for(int i1=0;i1<going_trains.length;i1++)
	    		    			   //{
	    		    				 //  System.out.println(going_trains[i1]);
	    		    			   //}
	    		    			   //System.out.println();
	    		    			   //System.out.println();
	    		    			   //System.out.println("Coming trains");
	    		    			   //for(int i2=0;i2<coming_trains.length;i2++)
	    		    			   //{
	    		    				 //  System.out.println(coming_trains[i2]);
	    		    			   //}
	    		    			   
	    		    			   //go to the next page
	    		    			   this.dispose();
	    		    			   new RoundTripWeekDayWeekDay().setVisible(true);
	    		    		   }
	    		    		   else
	    		    		   {
	    		    			   //Take San Francisco as the source for going and opposite for returning
	    		    			   sw = jComboBox1.getSelectedItem().toString();
	    		    			   dw = jComboBox2.getSelectedItem().toString();
	    		    			   source1 = jComboBox1.getSelectedItem().toString();
	    		    			   destination1 = jComboBox2.getSelectedItem().toString();
	    		    			   nop = Integer.parseInt(jTextField3.getText());
	    		    			   DatabaseConnectivity dbc = new DatabaseConnectivity();
	    		    			   dbc.databaseConnectivity();
	    		    			   going_trains = dbc.querySFSource(jComboBox1.getSelectedItem().toString(),jComboBox2.getSelectedItem().toString(),running_on_going,Integer.parseInt(jTextField3.getText()));
	    		    			   coming_trains = dbc.querySJSource(jComboBox2.getSelectedItem().toString(),jComboBox1.getSelectedItem().toString(),running_on_coming,Integer.parseInt(jTextField3.getText()));
	    		    			   //for(int i1=0;i1<going_trains.length;i1++)
	    		    			   //{
	    		    				 //  System.out.println(going_trains[i1]);
	    		    			   //}
	    		    			   //System.out.println();
	    		    			   //System.out.println();
	    		    			   //System.out.println("Coming trains");
	    		    			   //for(int i2=0;i2<coming_trains.length;i2++)
	    		    			   //{
	    		    				 //  System.out.println(coming_trains[i2]);
	    		    			   //}
	    		    			   
	    		    			   //go to the next page
	    		    			   this.dispose();
	    		    			   new RoundTripWeekDayWeekDay().setVisible(true);
	    		    		   }

	    		    	   }
	    		    	   
	    		    	   //if going day is weekday and coming day is weekend
	    		    	   else if((going_day.equals("Monday")||going_day.equals("Tuesday")||going_day.equals("Wednesday")||going_day.equals("Thursday")||going_day.equals("Friday"))&&(coming_day.equals("Saturday")||coming_day.equals("Sunday"))) 
	    		    	   {
	    		    		   String running_on_going = "Weekday";
	    		    		   String running_on_coming = "Weekend";
	    		    		   ron1 = "Weekday";
	    		    		   ron2 = "Weekend";
	    		    		   
	    		    		 //Decide the source by the station priorities
	    		    		   if((priority1-priority2)<0)
	    		    		   {
	    		    			   //Take San Jose as the source for going and opposite for returning
	    		    			   sw = jComboBox1.getSelectedItem().toString();
	    		    			   dw = jComboBox2.getSelectedItem().toString();
	    		    			   source1 = jComboBox1.getSelectedItem().toString();
	    		    			   destination1 = jComboBox2.getSelectedItem().toString();
	    		    			   nop = Integer.parseInt(jTextField3.getText());
	    		    			   DatabaseConnectivity dbc = new DatabaseConnectivity();
	    		    			   dbc.databaseConnectivity();
	    		    			   going_trains = dbc.querySJSource(jComboBox1.getSelectedItem().toString(),jComboBox2.getSelectedItem().toString(),running_on_going,Integer.parseInt(jTextField3.getText()));
	    		    			   coming_trains = dbc.querySFSource(jComboBox2.getSelectedItem().toString(),jComboBox1.getSelectedItem().toString(),running_on_coming,Integer.parseInt(jTextField3.getText()));
	    		    			   //for(int i1=0;i1<going_trains.length;i1++)
	    		    			   //{
	    		    				 //  System.out.println(going_trains[i1]);
	    		    			   //}
	    		    			   //System.out.println();
	    		    			   //System.out.println();
	    		    			   //System.out.println("Coming trains");
	    		    			   //for(int i2=0;i2<coming_trains.length;i2++)
	    		    			   //{
	    		    				 //  System.out.println(coming_trains[i2]);
	    		    			   //}
	    		    			   
	    		    			   //go to the next page
	    		    			   this.dispose();
	    		    			   new RoundTripWeekDayWeekEnd().setVisible(true);

	    		    		   }
	    		    		   else
	    		    		   {
	    		    			   //Take San Francisco as the source for going and opposite for returning
	    		    			   sw = jComboBox1.getSelectedItem().toString();
	    		    			   dw = jComboBox2.getSelectedItem().toString();
	    		    			   source1 = jComboBox1.getSelectedItem().toString();
	    		    			   destination1 = jComboBox2.getSelectedItem().toString();
	    		    			   nop = Integer.parseInt(jTextField3.getText());
	    		    			   DatabaseConnectivity dbc = new DatabaseConnectivity();
	    		    			   dbc.databaseConnectivity();
	    		    			   going_trains = dbc.querySFSource(jComboBox1.getSelectedItem().toString(),jComboBox2.getSelectedItem().toString(),running_on_going,Integer.parseInt(jTextField3.getText()));
	    		    			   coming_trains = dbc.querySJSource(jComboBox2.getSelectedItem().toString(),jComboBox1.getSelectedItem().toString(),running_on_coming,Integer.parseInt(jTextField3.getText()));
	    		    			   //for(int i1=0;i1<going_trains.length;i1++)
	    		    			   //{
	    		    				 //  System.out.println(going_trains[i1]);
	    		    			   //}
	    		    			   //System.out.println();
	    		    			   //System.out.println();
	    		    			   //System.out.println("Coming trains");
	    		    			   //for(int i2=0;i2<coming_trains.length;i2++)
	    		    			   //{
	    		    				 //  System.out.println(coming_trains[i2]);
	    		    			   //}
	    		    			   
	    		    			   //go to the next page
	    		    			   this.dispose();
	    		    			   new RoundTripWeekDayWeekEnd().setVisible(true);
	    		    		   }
	    		    		   

	    		    	   }
	    		    	   
	    		    	   //if going day is weekend and coming day is weekday
	    		    	   else if((going_day.equals("Saturday")||going_day.equals("Sunday"))&&(coming_day.equals("Monday")||coming_day.equals("Tuesday")||coming_day.equals("Wednesday")||coming_day.equals("Thursday")||coming_day.equals("Friday")))
	    		    	   {
	    		    		   String running_on_going = "Weekend";
	    		    		   String running_on_coming = "Weekday";
	    		    		   ron1 = "Weekend";
	    		    		   ron2 = "Weekday";
	    		    		   
	    		    		 //Decide the source by the station priorities
	    		    		   if((priority1-priority2)<0)
	    		    		   {
	    		    			   //Take San Jose as the source for going and opposite for returning
	    		    			   sw = jComboBox1.getSelectedItem().toString();
	    		    			   dw = jComboBox2.getSelectedItem().toString();
	    		    			   source1 = jComboBox1.getSelectedItem().toString();
	    		    			   destination1 = jComboBox2.getSelectedItem().toString();
	    		    			   nop = Integer.parseInt(jTextField3.getText());
	    		    			   DatabaseConnectivity dbc = new DatabaseConnectivity();
	    		    			   dbc.databaseConnectivity();
	    		    			   going_trains = dbc.querySJSource(jComboBox1.getSelectedItem().toString(),jComboBox2.getSelectedItem().toString(),running_on_going,Integer.parseInt(jTextField3.getText()));
	    		    			   coming_trains = dbc.querySFSource(jComboBox2.getSelectedItem().toString(),jComboBox1.getSelectedItem().toString(),running_on_coming,Integer.parseInt(jTextField3.getText()));
	    		    			   //for(int i1=0;i1<going_trains.length;i1++)
	    		    			   //{
	    		    				 //  System.out.println(going_trains[i1]);
	    		    			   //}
	    		    			   //System.out.println();
	    		    			   //System.out.println();
	    		    			   //System.out.println("Coming trains");
	    		    			   //for(int i2=0;i2<coming_trains.length;i2++)
	    		    			   //{
	    		    				 //  System.out.println(coming_trains[i2]);
	    		    			   //}
	    		    			   
	    		    			   //go to the next page
	    		    			   this.dispose();
	    		    			   new RoundTripWeekEndWeekDay().setVisible(true);
	    		    		   }
	    		    		   else
	    		    		   {
	    		    			   //Take San Francisco as the source for going and opposite for returning
	    		    			   sw = jComboBox1.getSelectedItem().toString();
	    		    			   dw = jComboBox2.getSelectedItem().toString();
	    		    			   source1 = jComboBox1.getSelectedItem().toString();
	    		    			   destination1 = jComboBox2.getSelectedItem().toString();
	    		    			   nop = Integer.parseInt(jTextField3.getText());
	    		    			   DatabaseConnectivity dbc = new DatabaseConnectivity();
	    		    			   dbc.databaseConnectivity();
	    		    			   going_trains = dbc.querySFSource(jComboBox1.getSelectedItem().toString(),jComboBox2.getSelectedItem().toString(),running_on_going,Integer.parseInt(jTextField3.getText()));
	    		    			   coming_trains = dbc.querySJSource(jComboBox2.getSelectedItem().toString(),jComboBox1.getSelectedItem().toString(),running_on_coming,Integer.parseInt(jTextField3.getText()));
	    		    			   //for(int i1=0;i1<going_trains.length;i1++)
	    		    			   //{
	    		    				 //  System.out.println(going_trains[i1]);
	    		    			   //}
	    		    			   //System.out.println();
	    		    			   //System.out.println();
	    		    			   //System.out.println("Coming trains");
	    		    			   //for(int i2=0;i2<coming_trains.length;i2++)
	    		    			   //{
	    		    				 //  System.out.println(coming_trains[i2]);
	    		    			   //}
	    		    			   
	    		    			   //go to the next page
	    		    			   this.dispose();
	    		    			   new RoundTripWeekEndWeekDay().setVisible(true);
	    		    		   }
	    		    		   

	    		    	   }
	    		    	   
	    		    	   //if both the days are weekends
	    		    	   else
	    		    	   {
	    		    		   String running_on_going = "Weekend";
	    		    		   String running_on_coming = "Weekend";
	    		    		   ron1 = "Weekend";
	    		    		   ron2 = "Weekend";
	    		    		   
	    		    		 //Decide the source by the station priorities
	    		    		   if((priority1-priority2)<0)
	    		    		   {
	    		    			   //Take San Jose as the source for going and opposite for returning
	    		    			   sw = jComboBox1.getSelectedItem().toString();
	    		    			   dw = jComboBox2.getSelectedItem().toString();
	    		    			   source1 = jComboBox1.getSelectedItem().toString();
	    		    			   destination1 = jComboBox2.getSelectedItem().toString();
	    		    			   nop = Integer.parseInt(jTextField3.getText());
	    		    			   DatabaseConnectivity dbc = new DatabaseConnectivity();
	    		    			   dbc.databaseConnectivity();
	    		    			   going_trains = dbc.querySJSource(jComboBox1.getSelectedItem().toString(),jComboBox2.getSelectedItem().toString(),running_on_going,Integer.parseInt(jTextField3.getText()));
	    		    			   coming_trains = dbc.querySFSource(jComboBox2.getSelectedItem().toString(),jComboBox1.getSelectedItem().toString(),running_on_coming,Integer.parseInt(jTextField3.getText()));
//	    		    			   for(int i1=0;i1<going_trains.length;i1++)
//	    		    			   {
//	    		    				   System.out.println(going_trains[i1]);
//	    		    			   }
//	    		    			   System.out.println();
//	    		    			   System.out.println();
//	    		    			   System.out.println("Coming trains");
//	    		    			   for(int i2=0;i2<coming_trains.length;i2++)
//	    		    			   {
//	    		    				   System.out.println(coming_trains[i2]);
//	    		    			   }
	    		    			   
	    		    			   //go to the next page
	    		    			   this.dispose();
	    		    			   new RoundTripWeekEndWeekEnd().setVisible(true);
	    		    		   }
	    		    		   else
	    		    		   {
	    		    			   //Take San Francisco as the source for going and opposite for returning
	    		    			   sw = jComboBox1.getSelectedItem().toString();
	    		    			   dw = jComboBox2.getSelectedItem().toString();
	    		    			   source1 = jComboBox1.getSelectedItem().toString();
	    		    			   destination1 = jComboBox2.getSelectedItem().toString();
	    		    			   nop = Integer.parseInt(jTextField3.getText());
	    		    			   DatabaseConnectivity dbc = new DatabaseConnectivity();
	    		    			   dbc.databaseConnectivity();
	    		    			   going_trains = dbc.querySFSource(jComboBox1.getSelectedItem().toString(),jComboBox2.getSelectedItem().toString(),running_on_going,Integer.parseInt(jTextField3.getText()));
	    		    			   coming_trains = dbc.querySJSource(jComboBox2.getSelectedItem().toString(),jComboBox1.getSelectedItem().toString(),running_on_coming,Integer.parseInt(jTextField3.getText()));
//	    		    			   for(int i1=0;i1<going_trains.length;i1++)
//	    		    			   {
//	    		    				   System.out.println(going_trains[i1]);
//	    		    			   }
//	    		    			   System.out.println();
//	    		    			   System.out.println();
//	    		    			   System.out.println("Coming trains");
//	    		    			   for(int i2=0;i2<coming_trains.length;i2++)
//	    		    			   {
//	    		    				   System.out.println(coming_trains[i2]);
//	    		    			   }
	    		    			   
	    		    			   //go to the next page
	    		    			   this.dispose();
	    		    			   new RoundTripWeekEndWeekEnd().setVisible(true);
	    		    		   }
	    		    		   

	    		    	   }
	    		    	   
	    		    	  
	    		       }
	    		       else
	    		       {
	    		    	   JOptionPane.showMessageDialog(this,"Please enter date in the format: dd/mm/yyyy","",JOptionPane.ERROR_MESSAGE);
	    		       }
	    		   }
	    		   
	    		   


	    	   }
	       }
	       
	       
	   }
	   else
	   {
		   JOptionPane.showMessageDialog(this,"Please fill up all the details.","EMPTY FIELDS",JOptionPane.ERROR_MESSAGE);
	   }

   }//GEN-LAST:event_jButton1ActionPerformed

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
       /* Set the Nimbus look and feel */
       //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
       /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
        */
       try {
           for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
               if ("Nimbus".equals(info.getName())) {
                   javax.swing.UIManager.setLookAndFeel(info.getClassName());
                   break;
               }
           }
       } catch (ClassNotFoundException ex) {
           java.util.logging.Logger.getLogger(SearchPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
       } catch (InstantiationException ex) {
           java.util.logging.Logger.getLogger(SearchPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
       } catch (IllegalAccessException ex) {
           java.util.logging.Logger.getLogger(SearchPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
       } catch (javax.swing.UnsupportedLookAndFeelException ex) {
           java.util.logging.Logger.getLogger(SearchPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
       }
       //</editor-fold>

       /* Create and display the form */
       java.awt.EventQueue.invokeLater(new Runnable() {
           public void run() {
              // new NewJFrame2().setVisible(true);
           }
       });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.ButtonGroup buttonGroup1;
   private javax.swing.JButton jButton1;
   private javax.swing.JComboBox jComboBox1;
   private javax.swing.JComboBox jComboBox2;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JLabel jLabel5;
   private javax.swing.JLabel jLabel6;
   private javax.swing.JLabel jLabel7;
   private javax.swing.JPanel jPanel1;
   private javax.swing.JPanel jPanel2;
   private javax.swing.JRadioButton jRadioButton1;
   private javax.swing.JRadioButton jRadioButton2;
   private javax.swing.JTextField jTextField1;
   private javax.swing.JTextField jTextField2;
   private javax.swing.JTextField jTextField3;
   // End of variables declaration//GEN-END:variables
}
